<?php
/**
 * User: Dominik
 * Date: 2016-09-12
 * Time: 01:25
 */
namespace SPL\ArrayObject;

class ArrayObj extends \ArrayObject {
    /**
     * Here I've changed default __construct $flags from 0 to \ArrayObject::ARRAY_AS_PROPS
     * now we can access array keys as properties (ARRAY_AS_PROPS) and object properties in loops (STD_PROP_LIST)
     * @param null $input
     * @param int $flags
     * @param string $iterator_class
     */
    public function __construct($input = null, $flags = \ArrayObject::STD_PROP_LIST|\ArrayObject::ARRAY_AS_PROPS, $iterator_class = "ArrayIterator") {
        parent::__construct($input, $flags, $iterator_class); // TODO: Change the autogenerated stub
    }

    /**
     * Magic trick to use built-in array functions on this object
     * like this: $yourObject->array_keys();
     * You must omit the first parameter, it's already passed in the call_user_func_array call
     *
     * @param $func
     * @param $argv
     * @return mixed
     * @throws BadMethodCallException
     */
    public function __call($func, $argv)
    {
        if (!is_callable($func) || substr($func, 0, 6) !== 'array_')
        {
            throw new BadMethodCallException(__CLASS__.'->'.$func);
        }
        return call_user_func_array($func, array_merge(array($this->getArrayCopy()), $argv));
    }
}

/////// example //
$arr = new ArrayObj([
    'nickName' => 'Mr Fantastic',
    'realName' => 'Reed Richards',
    'superPower' => 'rubber body',
    'relations' => new ArrayObj([
        new ArrayObj(['nickName' => 'The Thing']),
        new ArrayObj(['nickName' => 'Invisible Woman']),
        new ArrayObj(['nickName' => 'Human Torch']),
    ])
]);
echo "Hero {$arr->realName} aka {$arr->nickName} is related to: <br />";
foreach($arr->relations as $rel){
    echo "&nbsp;&nbsp;&nbsp;{$rel->nickName} <br />";
}
